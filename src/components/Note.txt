IMPORTANT :

SERVEUR APPACH

Scripting linux a connaitre

versioning a étudier 

Netli.fy = gratuit se documenter dessus

Il faut maitriser les tableaux

----------------------------------------------------------------

SEMAINE :

rendre un projet de fin de semaine / google forms 

javascript = language de scripting -------> Language de programmation (grace a node.js on peut faire du js serveur)

Comment fonctionne le javascript ?
-Il est éxecuter dans le navigateur 

Coté serveur : une application tourne sur le serveur

SPA = Single page application
IDE = Environnement de développement intégré

jsx == Html + javascript

Git = Logiciel de gestion de version ou source Différent de github et gitlab

SCM = source controle management

un rooter(rooter dom) permet de simuler la navigation sur le logiciel

Explication de gestion :

Git stock des données il sauvegarde des snapshot. cela permet de pouvoir

a quoi sert les commandes ci dessous ?

git add :
git init :
git clone :
git commit :
Git push :
git pull :

Besoin de base de réseau pour réussir

pour créer une app : npx create-react-app mon-premier-composant

Différente façon de déclarer des fonction .

Javascript manipule le dom (forme physique / rendu de la page WEB ) il injecte du code a l'aide de root

Une fonction qui retourne du jsx --> deviens un composant react

pour manipuler le dom avec react il faut utiliser react dom

classname pour le css --> viens du jsx

avantage d'utiliser des fonctions plutot que des classes dans le code : une fonction est prédictible alors qu'une classse peut avoir un comportement très aléatoire (difficile a tester)

Fonction pur : un argument en entrée --> elle aura toujours le meme resultat

Tout composant react a une fonction jsx a la racine 

Un module js = export 
export default = 1 seul par fichier pour l'export nommé autant que l'on souhaite

Générique = en c# structure de donné qui peut etre différent suivant comment on le paramètre 

this en javascript

opérateur ... = étaler le contenue dans l'assorti (console log objet etc)

Destructuration =

props = permet de faire passe rles infos dun composant parent a enfant

composant enfant : this.props




-----------------------------------------------------------------------

Transpilation = à définir dans le projet

ne pas utiliser de class dans le projet juste a l'aide des fonction jsx

app react

application déployé grace  a github(ou explication de comment faire)

commentaire markdown

API en node express avec qq endpoint un peut en get un peut enpost

grace  a lapi stocker dans une base de donnée

App avec un store 

faire un rooter(rooter dom) permet de simuler la navigation sur le logiciel

Créer un hook custom

authentification (1 root protégé)

bibliothèque css tailwin etc

NE PAS METTRE DE VAR

Un menu / un tableau de bord (possibilité d'editer une ligne / arrivé sur une page de connexion (pas forcement inscription)

Un css par composant 

créer le template du rendu finale 

MERN = MANGO EXPRESS REACT node



-----------------------------------------------------------------------

const array = [0,1,3];

console.log(...array);

const Person = {
  Name: "yan",
  age:"70"
}

const Yassine = {
  name: "Yassine",
    ...Person
}

console.log(Yassine)





